// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
	// 跳过空白符和注释
	r"\s*" => {},
	r"//[^\n\r]*[\n\r]*" => {},
	r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
	// 剩下的情况采用默认方式处理
	_
}

use compiler::parser::ast::structs::*;

// 定义 CompUnit, 其返回值类型为 String
// parser 在解析完成后的行为是返回 FuncDef 的值
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit{ <> };

pub Decl: Decl = {
	<c: ConstDecl> => Decl::Const(c),
	<v: VarDecl> => Decl::Var(v),
}

pub ConstDecl: ConstDecl = {
	"const" "int" <def: ConstDef> <defs: ("," <ConstDef>)*> ";" => {
		let mut c = ConstDecl{ defs: vec![def] };
		c.defs.extend(defs);
		c
	}
}

pub VarDecl: VarDecl = {
	"int" <def: VarDef> <defs: ("," <VarDef>)*> ";" => {
		let mut v = VarDecl{ defs: vec![def] };
		v.defs.extend(defs);
		v
	}
}

pub ConstDef: ConstDef = {
	<ident: Ident> "=" <value: ConstInitVal> => ConstDef{ ident, value }
}

pub VarDef: VarDef = {
	<ident: Ident> "=" <value: InitVal> => VarDef::InitVal(ident, value),
	<ident: Ident> => VarDef::Ident(ident)
}

pub ConstInitVal: ConstInitVal = {
	<const_exp: ConstExp> => <>
}

pub InitVal: InitVal = {
	<exp: Exp> => <>.into()
}

pub ConstExp: ConstExp = {
	<exp: Exp> => <>
}

pub FuncDef: FuncDef = {
	<func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
	    FuncDef{ <> }
    }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <items: (<BlockItem>)*> "}" => Block{ items };

BlockItem: BlockItem = {
	<decl: Decl> => BlockItem::Decl(decl),
	<stmt: Stmt> => BlockItem::Stmt(stmt),
}

Stmt: Stmt = {
	"return" <exp: Exp> ";" => Stmt::Ret(exp),
	<lval: LVal> "=" <exp: Exp> ";" => Stmt::LVal(lval, exp),
}



Exp: Exp = <lor_exp: LOrExp> => Exp::Exp(lor_exp);

PrimaryExp: PrimaryExp = {
	"(" <exp: Exp> ")" => PrimaryExp::Exp(Box::new(exp)),
	<lval: LVal> => PrimaryExp::LVal(lval),
    <number: Number> => PrimaryExp::Number(number),
};

LVal: LVal = {
	<ident: Ident> => <>.into(),
}

UnaryExp: UnaryExp = {
    <primary: PrimaryExp> => UnaryExp::PrimaryExp(primary),
    <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp::UnaryOp(unary_op, Box::new(unary_exp)),
};

UnaryOp: UnaryOp = {
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not,
    "+" => UnaryOp::Plus
};

MulExp: MulExp = {
	<unary_exp: UnaryExp> => MulExp::UnaryExp(unary_exp),
	<mul_exp: MulExp> <mul_op: MulOp>  <unary_exp: UnaryExp> => MulExp::MulExp(Box::new(mul_exp), mul_op, unary_exp),
};

MulOp: MulOp = {
	"*" => MulOp::Mul,
	"/" => MulOp::Div,
	"%" => MulOp::Mod
};

AddExp: AddExp = {
	<mul_exp: MulExp> => AddExp::MulExp(mul_exp),
	 <add_exp: AddExp> <add_op: AddOp> <mul_exp: MulExp> => AddExp::AddExp(Box::new(add_exp), add_op, mul_exp),
};

AddOp: AddOp = {
	"+" => AddOp::Add,
	"-" => AddOp::Sub
};

Number: Number = <number: IntConst> => <>;

RelExp: RelExp = {
	<add_exp: AddExp> => RelExp::AddExp(add_exp),
	<rel_exp: RelExp> <rel_op: RelOp> <add_exp: AddExp> => RelExp::RelExp(Box::new(rel_exp), rel_op, add_exp),
};


RelOp: RelOp = {
	"<" => RelOp::Lt,
	"<=" => RelOp::Le,
	">" => RelOp::Gt,
	">=" => RelOp::Ge,
}

EqExp: EqExp = {
	<rel_exp: RelExp> => EqExp::RelExp(rel_exp),
	<eq_exp: EqExp> <eq_op: EqOp> <rel_exp: RelExp> => EqExp::EqExp(Box::new(eq_exp), eq_op, rel_exp),
}

EqOp: EqOp = {
	"==" => EqOp::Eq,
	"!=" => EqOp::Ne,
}

LAndExp: LAndExp = {
	<eq_exp: EqExp> => LAndExp::EqExp(eq_exp),
	<land_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::LAndExp(Box::new(land_exp), eq_exp),
}

LOrExp: LOrExp = {
	<land_exp: LAndExp> => LOrExp::LAndExp(land_exp),
	<lor_exp: LOrExp> "||" <land_exp: LAndExp> => LOrExp::LOrExp(Box::new(lor_exp), land_exp),
}

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: Ident = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
	r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
	r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
	r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}


