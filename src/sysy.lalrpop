// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
	// 跳过空白符和注释
	r"\s*" => {},
	r"//[^\n\r]*[\n\r]*" => {},
	r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
	// 剩下的情况采用默认方式处理
	_
}

use compiler::parser::ast::structs::*;

// 定义 CompUnit, 其返回值类型为 String
// parser 在解析完成后的行为是返回 FuncDef 的值
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit{ <> };

// 同上, 不解释
FuncDef: FuncDef = {
	<func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
	    FuncDef{ <> }
    }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block{ <> };

Stmt: Stmt = "return" <exp: Exp> ";" => Stmt{ <> };

Exp: Exp = <add_exp: AddExp> => Exp::AddExp(add_exp);

PrimaryExp: PrimaryExp = {
	"(" <exp: Exp> ")" => PrimaryExp::Exp(Box::new(exp)),
    <number: Number> => PrimaryExp::Number(number),
};

UnaryExp: UnaryExp = {
    <primary: PrimaryExp> => UnaryExp::PrimaryExp(primary),
    <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp::UnaryOp(unary_op, Box::new(unary_exp)),
};

UnaryOp: UnaryOp = {
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not,
    "+" => UnaryOp::Plus
};

MulExp: MulExp = {
	<unary_exp: UnaryExp> => MulExp::UnaryExp(unary_exp),
	<mul_exp: MulExp> <mul_op: MulOp>  <unary_exp: UnaryExp> => MulExp::MulExp(Box::new(mul_exp), mul_op, unary_exp),
};

MulOp: MulOp = {
	"*" => MulOp::Mul,
	"/" => MulOp::Div,
	"%" => MulOp::Mod
};

AddExp: AddExp = {
	<mul_exp: MulExp> => AddExp::MulExp(mul_exp),
	 <add_exp: AddExp> <add_op: AddOp> <mul_exp: MulExp> => AddExp::AddExp(Box::new(add_exp), add_op, mul_exp),
};

AddOp: AddOp = {
	"+" => AddOp::Add,
	"-" => AddOp::Sub
};

Number: Number = <number: IntConst> => <>;

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
	r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
	r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
	r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}


